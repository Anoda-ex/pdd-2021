[{"D:\\Projects\\pdd\\src\\index.js":"1","D:\\Projects\\pdd\\src\\App.js":"2","D:\\Projects\\pdd\\src\\routes.js":"3","D:\\Projects\\pdd\\src\\utils\\consts.js":"4","D:\\Projects\\pdd\\src\\components\\Test\\Test.js":"5","D:\\Projects\\pdd\\src\\components\\Login\\Login.js":"6","D:\\Projects\\pdd\\src\\components\\Questions\\Questions.js":"7","D:\\Projects\\pdd\\src\\components\\ThemeSelect\\ThemeSelect.js":"8","D:\\Projects\\pdd\\src\\components\\Settings\\Settings.js":"9","D:\\Projects\\pdd\\src\\HOC\\Container\\Container.js":"10","D:\\Projects\\pdd\\src\\components\\Errors\\Errors.js":"11","D:\\Projects\\pdd\\src\\components\\UI\\Switch\\Switch.js":"12","D:\\Projects\\pdd\\src\\components\\UI\\Loader\\Loader.js":"13"},{"size":887,"mtime":1627427924193,"results":"14","hashOfConfig":"15"},{"size":1073,"mtime":1630362343073,"results":"16","hashOfConfig":"15"},{"size":338,"mtime":1627426168206,"results":"17","hashOfConfig":"15"},{"size":70,"mtime":1627426143961,"results":"18","hashOfConfig":"15"},{"size":7713,"mtime":1630362251271,"results":"19","hashOfConfig":"15"},{"size":533,"mtime":1627426521709,"results":"20","hashOfConfig":"15"},{"size":5943,"mtime":1630355450467,"results":"21","hashOfConfig":"15"},{"size":1194,"mtime":1630259692287,"results":"22","hashOfConfig":"15"},{"size":3158,"mtime":1630292016624,"results":"23","hashOfConfig":"15"},{"size":719,"mtime":1630361825763,"results":"24","hashOfConfig":"15"},{"size":1671,"mtime":1630291595885,"results":"25","hashOfConfig":"15"},{"size":482,"mtime":1630355695000,"results":"26","hashOfConfig":"15"},{"size":166,"mtime":1630362330579,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"2dotx5",{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"D:\\Projects\\pdd\\src\\index.js",[],["63","64"],"D:\\Projects\\pdd\\src\\App.js",["65","66","67","68"],"import React, {useContext} from 'react';\nimport './App.css'\nimport {Context} from \"./index\";\nimport {useAuthState} from \"react-firebase-hooks/auth\";\nimport Loader from \"./components/UI/Loader/Loader\";\nimport {BrowserRouter,Switch,Redirect,Route } from \"react-router-dom\"\nimport {TEST_ROUTE, LOGIN_ROUTE} from \"./utils/consts\";\nimport {publicRoutes,privateRoutes} from \"./routes\"\n\nconst App = () => {\n    \n\n    return (\n        <BrowserRouter>\n            {true  ?\n        (\n            <Switch>\n                {privateRoutes.map(({path, Component}) =>\n                    <Route key={path} path={path} component={Component} exact={true}/>\n                )}\n                <Redirect to={TEST_ROUTE}/>\n            </Switch>\n        )\n        :\n        (\n            <Switch>\n                {publicRoutes.map(({path, Component}) =>\n                    <Route key={path} path={path} component={Component} exact={true}/>\n                )}\n                <Redirect to={LOGIN_ROUTE}/>\n            </Switch>\n        )}\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n","D:\\Projects\\pdd\\src\\routes.js",[],"D:\\Projects\\pdd\\src\\utils\\consts.js",[],"D:\\Projects\\pdd\\src\\components\\Test\\Test.js",["69","70","71","72","73","74","75","76","77","78","79"],"import React,{useContext,useEffect,useState} from 'react'\r\nimport Container from '../../HOC/Container/Container'\r\nimport {Context} from \"../../index\"\r\nimport Errors from '../Errors/Errors'\r\nimport Loader from '../UI/Loader/Loader'\r\nimport Questions from '../Questions/Questions'\r\nimport Settings from '../Settings/Settings'\r\nimport ThemeSelect from '../ThemeSelect/ThemeSelect'\r\nexport default function Test(props) {\r\n    const {auth, database} = useContext(Context)\r\n    const [themes,setThemes]=useState([])\r\n    const [selectThemes,setSelectThemes]=useState([0])\r\n    const [errors,setErrors]=useState({})\r\n    const [settings,setSettings]=useState({\r\n        trackErrors: true,\r\n        nextAnswerWaitingTime: 2000,\r\n        onlyErrorTestingMode:false,\r\n        onlyThemeError:false\r\n    })\r\n    const [selectError,setSelectError]=useState(null)\r\n    const [UID, setUID] = useState(null)\r\n    const [authError, setAuthError] = useState(null)\r\n\r\n\r\n    useEffect(() => {\r\n        getThemes()\r\n        auth.onAuthStateChanged(user=>{\r\n            if(user){\r\n                setUID(user.uid)\r\n            }\r\n        })\r\n\r\n    }, [])\r\n    useEffect(() => {\r\n        if(UID){\r\n            getErrors()\r\n        }\r\n    }, [UID])\r\n\r\n\r\n    const getThemes = () => {\r\n        database.ref(\"/themes\").once(\"value\",themes=>{\r\n            setThemes(themes.val())\r\n        })\r\n    }\r\n    const getErrors = () => {\r\n        database.ref(\"/errors/\"+UID+\"/themes\").on(\"value\",errors=>{\r\n            if(errors.val()){\r\n                setErrors(errors.val())\r\n\r\n            }\r\n        })\r\n    }\r\n    const addError=(theme,question,title,yourAnswer,correctAnswer,yourAnswerIndex,correctAnswerIndex)=>{\r\n        if(UID){\r\n            database.ref(\"/errors/\"+UID+\"/themes/\"+theme+\"/\"+question).push({\r\n                title:title,\r\n                yourAnswer:yourAnswer,\r\n                correctAnswer:correctAnswer,\r\n                yourAnswerIndex:yourAnswerIndex,\r\n                correctAnswerIndex:correctAnswerIndex\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    const transformQuestions=()=>{\r\n        let questions={}\r\n        selectThemes.map(themeId=>{\r\n            questions={...questions,...themes[themeId]?.quests}\r\n            Object.keys(themes[themeId].quests).map(questId=>{\r\n                questions[questId]={...themes[themeId].quests[questId],themeId:themeId}\r\n            })\r\n        })\r\n        return questions\r\n    }\r\n    const transformErrors=()=>{\r\n        let questions={}\r\n        let currentQuestions={}\r\n        if(settings.onlyThemeError){\r\n            selectThemes.map(themeId=>{\r\n                \r\n                let originalTheme=themes[themeId]\r\n                if(errors[themeId]){\r\n                    Object.keys(errors[themeId]).map(questionId=>{\r\n                        if(errors[themeId]){\r\n                            let question=errors[themeId][questionId][Object.keys(errors[themeId][questionId])[0]]\r\n                            let originalQuestion=originalTheme.quests[questionId]\r\n                            questions[questionId]={...originalQuestion,themeId:themeId}\r\n                            currentQuestions[questionId]={active:question.yourAnswerIndex,status:\"no\",edit:false}\r\n                        }\r\n                    })\r\n                    if(Object.keys(questions).indexOf(selectError)<0){\r\n                        setSelectError(Object.keys(questions)[0])\r\n                    }\r\n\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            Object.keys(errors).map(themeId=>{\r\n                let originalTheme=themes[themeId]\r\n                Object.keys(errors[themeId]).map(questionId=>{\r\n                    let question=errors[themeId][questionId][Object.keys(errors[themeId][questionId])[0]]\r\n                    let originalQuestion=originalTheme.quests[questionId]\r\n                    questions[questionId]={...originalQuestion,themeId:themeId}\r\n                    currentQuestions[questionId]={active:question.yourAnswerIndex,status:\"no\",edit:false}\r\n                    \r\n                })\r\n            })\r\n        }\r\n\r\n        return [questions,currentQuestions]\r\n    }\r\n\r\n    let selectErrorHandler=(selectError)=>{\r\n        setSelectError(selectError)\r\n        if(!settings.onlyErrorTestingMode){\r\n            setSettings(nowSetting=>({...nowSetting,onlyErrorTestingMode:true}))\r\n        }\r\n    }\r\n\r\n    let startAuth=(isRegister,email,password)=>{\r\n        setUID(null)\r\n        setAuthError(null)\r\n\r\n        if(isRegister){\r\n            auth.createUserWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n              let user = userCredential.user;\r\n            //   setUID(user.uid)\r\n            })\r\n            .catch((error) => {\r\n              let errorCode = error.code;\r\n              let errorMessage = error.message;\r\n              setAuthError([errorCode,errorMessage])\r\n              \r\n            });\r\n        }else{\r\n            auth.signInWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n              let user = userCredential.user;\r\n            })\r\n            .catch((error) => {\r\n              let errorCode = error.code;\r\n              let errorMessage = error.message;\r\n              setAuthError([errorCode,errorMessage])\r\n              \r\n            });\r\n\r\n           \r\n        }\r\n    }\r\n    let exit=()=>{\r\n        auth.signOut().then(()=>{\r\n            database.ref(\"/errors/\"+UID+\"/themes\").off()\r\n            setUID(null)\r\n            setAuthError(null)\r\n            setErrors({})\r\n            setSelectError(null)\r\n        })\r\n    }\r\n\r\n    if(themes.length==0){\r\n        return <Loader></Loader>\r\n    }\r\n    \r\n    \r\n    let questions=Object.keys(themes).length>0?transformQuestions(selectThemes):[]\r\n    let [errorsQuestions,errorsAnswers]=transformErrors()\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Container title=\"Список тем\" initHideContainer>\r\n                    <ThemeSelect \r\n                        themes={themes} \r\n                        selectThemes={selectThemes} \r\n                        setSelectThemes={setSelectThemes} >\r\n                    </ThemeSelect>\r\n                </Container>\r\n                <Questions \r\n                    questions={questions} \r\n                    addError={addError} \r\n                    themes={selectThemes}\r\n                    settings={settings}\r\n                    errorsQuestions={errorsQuestions}\r\n                    errorsAnswers={errorsAnswers}\r\n                    selectError={selectError}\r\n                    setSelectError={setSelectError}\r\n                ></Questions>\r\n                <Container title=\"Список ошибок\">\r\n                    <Errors \r\n                        errors={errors} \r\n                        settings={settings} \r\n                        themes={themes}\r\n                        selectErrorHandler={selectErrorHandler}\r\n                        selectThemes={selectThemes}\r\n                        selectError={selectError}\r\n                        isAuth={!!UID}\r\n                    >\r\n                    </Errors>\r\n                </Container>\r\n                <Container title=\"Настройки\">\r\n                    <Settings \r\n                        setParam={(paramName,value)=>{setSettings(nowSetting=>({...nowSetting,[paramName]:value}))}} \r\n                        settings={settings}\r\n                        auth={startAuth}\r\n                        isAuth={!!UID}\r\n                        exit={exit}\r\n                        authError={authError}\r\n                    >\r\n                    </Settings>\r\n                </Container>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","D:\\Projects\\pdd\\src\\components\\Login\\Login.js",["80","81","82","83","84","85","86"],"import React, {useContext} from 'react';\nimport {Button, Container, Grid} from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport {Context} from \"../../index\";\nimport firebase from \"firebase\";\n\n\nconst Login = () => {\n    // const {auth} = useContext(Context)\n\n    // const login = async () => {\n    //     const provider = new firebase.auth.GoogleAuthProvider()\n    //     const {user} = await auth.(provider)\n    //     console.log(user)\n    // }\n\n    return (\n        <div></div>\n    );\n};\n\nexport default Login;\n","D:\\Projects\\pdd\\src\\components\\Questions\\Questions.js",["87","88","89","90","91","92","93","94","95","96","97","98","99","100"],"import React,{useState,useEffect} from 'react'\r\nimport classes from \"./Questions.module.css\"\r\nfunction Questions(props) {\r\n    let [answersState,setAnswersState]=useState({})\r\n    let [currentQuestion,setCurrentQuestionState]=useState(null)\r\n    // props.settings.onlyErrorTestingMode?\r\n    let answers=props.settings.onlyErrorTestingMode?props.errorsAnswers:answersState\r\n    //выбор списка вопросов в зависимости от того включено показывание ошибок\r\n    let questions=props.settings.onlyErrorTestingMode?props.errorsQuestions:props.questions\r\n    let setCurrentQuestion=(questNumber)=>{\r\n        setCurrentQuestionState(questNumber)\r\n        if(props.settings.onlyErrorTestingMode){\r\n            props.setSelectError(questNumber)\r\n        }else{\r\n            props.setSelectError(null)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if(!props.settings.onlyErrorTestingMode){\r\n                setCurrentQuestion((Object.keys(props.questions))[0])\r\n            }\r\n            else{\r\n                if(props.selectError){\r\n                    setCurrentQuestion(props.selectError)\r\n                }else{\r\n                    setCurrentQuestion(Object.keys(props.errorsQuestions)[0])\r\n                    \r\n                }\r\n            }\r\n        },\r\n        [props.themes,props.settings.onlyErrorTestingMode,props.selectError],\r\n      );\r\n    \r\n\r\n    let questList=Object.keys(questions).map(quest=>{\r\n        let classList=[classes.questItem]\r\n        if(currentQuestion==quest){\r\n            classList.push(classes.active)\r\n        }\r\n        if(answers[quest]?.status==\"ok\"){\r\n            classList.push(classes.ok)\r\n        }\r\n        if(answers[quest]?.status==\"no\"){\r\n            classList.push(classes.no)\r\n        }\r\n        return <div \r\n                    className={classList.join(\" \")} \r\n                    onClick={()=>{setCurrentQuestion(quest)}}\r\n                    key={quest}\r\n                >{quest}</div>\r\n    })\r\n    let answerList = null\r\n    if(currentQuestion){\r\n        answerList = questions[currentQuestion]?.answer.map((answerText,number)=>{\r\n            let classList=[classes.answer]\r\n           \r\n            if(answers[currentQuestion]?.status==\"ok\" && answers[currentQuestion]?.active==number){\r\n                classList.push(classes.ok)\r\n            }\r\n            if(answers[currentQuestion]?.status==\"no\" && questions[currentQuestion].correctAnswer==number+1){\r\n                classList.push(classes.ok)\r\n            }\r\n            if(answers[currentQuestion]?.status==\"no\" && answers[currentQuestion]?.active==number){\r\n                classList.push(classes.no)\r\n            }\r\n            if(!answers[currentQuestion]?.status && answers[currentQuestion]?.active==number){\r\n                classList.push(classes.active)\r\n            }\r\n            return <div key={answerText} className={classList.join(\" \")} onClick={()=>{(!answers[currentQuestion]?.edit) && setAnswersState({...answers,[currentQuestion]:{...answers[currentQuestion],active:number}  })}}>{answerText}</div>\r\n        })\r\n    }\r\n\r\n\r\n    //метод проверки, написан на answersState, независимо от того включено показывать ошибки или нет\r\n    //так как если ошибки показаны, метод cheсk() не должен работать\r\n    const check=()=>{\r\n        let questionsKeys= Object.keys(questions)\r\n        let indexOfCurrentQuestion=questionsKeys.indexOf(currentQuestion)\r\n        let lastIndexOfQuestions=questionsKeys[questionsKeys.length-1]\r\n        let waitingTime=props.settings.onlyErrorTestingMode?0:props.settings.nextAnswerWaitingTime\r\n        if(indexOfCurrentQuestion>=lastIndexOfQuestions){\r\n            console.log(\"Конец\");\r\n        }else{\r\n            setTimeout(()=>{\r\n                setCurrentQuestion(questionsKeys[indexOfCurrentQuestion+1])\r\n            \r\n            },waitingTime)\r\n        }\r\n\r\n        if(props.settings.onlyErrorTestingMode){\r\n            return\r\n        }\r\n\r\n        if(answersState[currentQuestion]?.active+1==props.questions[currentQuestion].correctAnswer){\r\n            setAnswersState({...answersState,[currentQuestion]:{...answersState[currentQuestion],status:\"ok\",edit:true}})\r\n        }else{\r\n            let question=props.questions[currentQuestion]\r\n            setAnswersState({...answersState,[currentQuestion]:{...answersState[currentQuestion],status:\"no\",edit:true}})\r\n            if(props.settings.trackErrors){\r\n                props.addError(question.themeId,currentQuestion,question.title,question.answer[answers[currentQuestion]?.active],question.answer[question.correctAnswer-1],answers[currentQuestion]?.active,question.correctAnswer-1)\r\n            }\r\n        }\r\n        \r\n       \r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {Object.keys(questions).length>0?\r\n            <React.Fragment><div className={classes.questList}>\r\n                {questList}\r\n            </div>\r\n            {questions[currentQuestion]&&<div className={classes.title}>{questions[currentQuestion].title}</div>}\r\n            {currentQuestion&&questions[currentQuestion]?.img&& questions[currentQuestion]?.img!=\"none\"&&\r\n                <div className={classes.imgWrapper}>\r\n                    <img src={\"https://xn----gtbem5ahjgc.com/stat01052020/images/online/\"+questions[currentQuestion].img} className={classes.img}></img>\r\n                </div> \r\n            }\r\n            <div className={classes.answerList}>\r\n                {answerList}\r\n            </div>\r\n            <button className={classes.button} onClick={check} \r\n            disabled={!answers[currentQuestion]}\r\n            >Следующий</button></React.Fragment>:<div className={classes.NoQuestions}>Нет вопросов по теме</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Questions\r\n","D:\\Projects\\pdd\\src\\components\\ThemeSelect\\ThemeSelect.js",["101","102"],"import React,{useState} from 'react'\r\nimport classes from \"./ThemeSelect.module.css\"\r\nexport default function ThemeSelect(props) {\r\n    // const [selectedThemes,seSelectedThemes]=useState({})\r\n    const setSelectThemes=(index)=>{\r\n        if(props.selectThemes.indexOf(index)==-1){\r\n          \r\n\r\n            let selectThemes=[...props.selectThemes]\r\n            selectThemes.push(index)\r\n            props.setSelectThemes(selectThemes)\r\n        }else{\r\n            let selectThemes=[...props.selectThemes]\r\n            selectThemes.splice(selectThemes.indexOf(index),1)\r\n            props.setSelectThemes(selectThemes)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.wrapper}>\r\n                {props.themes.map((theme,index)=>{\r\n                    let classList=[classes.item]\r\n                    if(props.selectThemes.indexOf(index)>-1){\r\n                        classList.push(classes.active)\r\n                    }\r\n                    return <div key={theme.name} className={classList.join(\" \")} onClick={()=>{setSelectThemes(index)}}>{theme.name}</div>\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","D:\\Projects\\pdd\\src\\components\\Settings\\Settings.js",["103"],"import React, { useState,useRef } from 'react'\r\nimport Switch from '../UI/Switch/Switch'\r\nimport classes from \"./Settings.module.css\"\r\nlet authTranslate={\r\n    \"auth/invalid-email\":\"Неправильная почта\",\r\n    \"auth/user-not-found\":\"Нет пользователя с такой почтой\",\r\n    \"auth/email-already-in-use\":\"Почтовый адресс занят\",\r\n    \"auth/weak-password\":\"Слабый пароль, нужно миниум 6 символов\",\r\n    \"auth/wrong-password\":\"Неправильный пароль\"\r\n}\r\nexport default function Settings(props) {\r\n    // const [isTrackError, setIsTrackError] = useState(initialState)\r\n    const [isRegister, setIsRegister] = useState(false)\r\n    const emailRef = useRef(\"\")\r\n    const passwordRef = useRef(\"\")\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.row}>\r\n                <p className={classes.title}>Сохранять ошибки</p>\r\n                <Switch switch={()=>{props.setParam(\"trackErrors\",!props.settings.trackErrors)}} isActive={props.settings.trackErrors&&props.isAuth}></Switch>\r\n            </div>\r\n            <div className={classes.row}>\r\n                <p className={classes.title}>Тестировать только по ошибкам</p>\r\n                <Switch switch={()=>{props.setParam(\"onlyErrorTestingMode\",!props.settings.onlyErrorTestingMode)}} isActive={props.settings.onlyErrorTestingMode}></Switch>\r\n            </div>\r\n            <div className={classes.row}>\r\n                <p className={classes.title}>Показывать ошибки только по выбранной теме</p>\r\n                <Switch switch={()=>{props.setParam(\"onlyThemeError\",!props.settings.onlyThemeError)}} isActive={props.settings.onlyThemeError}></Switch>\r\n            </div>\r\n            <div className={classes.authWrapper}>\r\n                {props.isAuth?\r\n                <button onClick={props.exit} className={classes.authButton}>Выйти с аккаунта</button>\r\n                :\r\n                <React.Fragment>\r\n                    <h2 className={classes.authTitle}>{isRegister?\"Регистрация\":\"Войти\"}</h2>\r\n                    <input ref={emailRef} className={classes.authInput} placeholder=\"Почта\"></input>\r\n                    <input ref={passwordRef} className={classes.authInput} placeholder=\"Пароль\" type=\"password\"></input>\r\n                    <div onClick={()=>{setIsRegister(!isRegister)}} className={classes.authMode}>{isRegister?\"Есть аккаунт?\":\"Нет аккаунта?\"}</div>\r\n                    {props.authError&&props.authError.length==2 && <div className={classes.authError}>{authTranslate[props.authError[0]] ? authTranslate[props.authError[0]] : props.authError[1]}</div> }\r\n                    <button onClick={()=>{props.auth(isRegister,emailRef.current.value,passwordRef.current.value)}} className={classes.authButton}>{isRegister?\"Зарегестрироваться\":\"Войти в аккаунт\"}</button>\r\n                </React.Fragment>\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","D:\\Projects\\pdd\\src\\HOC\\Container\\Container.js",["104"],"import React,{useState,useEffect} from 'react'\r\nimport classes from \"./Container.module.css\"\r\nexport default function Container(props){\r\n    const [showContainer, setShowContainer] = useState(true)\r\n    useEffect(() => {\r\n        setShowContainer(!props.initHideContainer)\r\n    }, [])\r\n    return (\r\n        <div className=\"container\">\r\n                <div className={classes.topWrapper} onClick={()=>{setShowContainer(!showContainer)}}>\r\n                    <h1 className={classes.title}>{props.title}</h1>\r\n                    <div className={classes.show} >{showContainer?\"Скрыть\":\"Показать\"}</div>\r\n                </div>\r\n                {showContainer && props.children}\r\n        </div>\r\n    )\r\n}\r\n","D:\\Projects\\pdd\\src\\components\\Errors\\Errors.js",["105","106"],"import React from 'react'\r\nimport classes from \"./Errors.module.css\"\r\nexport default function Errors(props) {\r\n    \r\n    let isErrors=true;\r\n    let content=Object.keys(props.errors).map(themeId=>{  \r\n        if(props.settings.onlyThemeError && props.selectThemes.indexOf(+themeId)<0){\r\n            return null\r\n        }else{\r\n            isErrors=false\r\n            let originalTheme=props.themes[themeId]\r\n            return <div key={originalTheme.name}>\r\n                <div className={classes.title}>\r\n                    <span className={classes.title}>{originalTheme.name}</span>\r\n                </div>\r\n                <div className={classes.questTitles}>\r\n                    {Object.keys(props.errors[themeId]).map(questionId=>{\r\n                        let question=props.errors[themeId][questionId][Object.keys(props.errors[themeId][questionId])[0]]\r\n                        let originalQuestion=originalTheme.quests[questionId]\r\n                        let classList=[classes.questTitle]\r\n                        if(questionId==props.selectError){\r\n                            classList.push(classes.active)\r\n                        }\r\n                        return <div className={classList.join(\" \")} key={questionId} onClick={()=>{props.selectErrorHandler(questionId)}}>{questionId}. {question.title}</div>\r\n                    })}\r\n                </div>\r\n            </div>  \r\n\r\n        }\r\n    })\r\n    if(isErrors){\r\n        content=<div className={classes.titleNoErrors}>{props.isAuth?\"У вас нет ошибок\":\"Войдите в аккаунт\"}</div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n","D:\\Projects\\pdd\\src\\components\\UI\\Switch\\Switch.js",[],"D:\\Projects\\pdd\\src\\components\\UI\\Loader\\Loader.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":1,"column":16,"nodeType":"113","messageId":"114","endLine":1,"endColumn":26},{"ruleId":"111","severity":1,"message":"115","line":3,"column":9,"nodeType":"113","messageId":"114","endLine":3,"endColumn":16},{"ruleId":"111","severity":1,"message":"116","line":4,"column":9,"nodeType":"113","messageId":"114","endLine":4,"endColumn":21},{"ruleId":"111","severity":1,"message":"117","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":14},{"ruleId":"118","severity":1,"message":"119","line":33,"column":8,"nodeType":"120","endLine":33,"endColumn":10,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":38,"column":8,"nodeType":"120","endLine":38,"endColumn":13,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":69,"column":33,"nodeType":"126","messageId":"127","endLine":69,"endColumn":35},{"ruleId":"124","severity":1,"message":"125","line":71,"column":60,"nodeType":"126","messageId":"127","endLine":71,"endColumn":62},{"ruleId":"124","severity":1,"message":"125","line":81,"column":37,"nodeType":"126","messageId":"127","endLine":81,"endColumn":39},{"ruleId":"124","severity":1,"message":"125","line":85,"column":64,"nodeType":"126","messageId":"127","endLine":85,"endColumn":66},{"ruleId":"124","severity":1,"message":"125","line":101,"column":44,"nodeType":"126","messageId":"127","endLine":101,"endColumn":46},{"ruleId":"124","severity":1,"message":"125","line":103,"column":60,"nodeType":"126","messageId":"127","endLine":103,"endColumn":62},{"ruleId":"111","severity":1,"message":"128","line":130,"column":19,"nodeType":"113","messageId":"114","endLine":130,"endColumn":23},{"ruleId":"111","severity":1,"message":"128","line":142,"column":19,"nodeType":"113","messageId":"114","endLine":142,"endColumn":23},{"ruleId":"129","severity":1,"message":"130","line":164,"column":21,"nodeType":"131","messageId":"132","endLine":164,"endColumn":23},{"ruleId":"111","severity":1,"message":"112","line":1,"column":16,"nodeType":"113","messageId":"114","endLine":1,"endColumn":26},{"ruleId":"111","severity":1,"message":"133","line":2,"column":9,"nodeType":"113","messageId":"114","endLine":2,"endColumn":15},{"ruleId":"111","severity":1,"message":"134","line":2,"column":17,"nodeType":"113","messageId":"114","endLine":2,"endColumn":26},{"ruleId":"111","severity":1,"message":"135","line":2,"column":28,"nodeType":"113","messageId":"114","endLine":2,"endColumn":32},{"ruleId":"111","severity":1,"message":"136","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":11},{"ruleId":"111","severity":1,"message":"115","line":4,"column":9,"nodeType":"113","messageId":"114","endLine":4,"endColumn":16},{"ruleId":"111","severity":1,"message":"137","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":16},{"ruleId":"118","severity":1,"message":"138","line":34,"column":9,"nodeType":"120","endLine":34,"endColumn":77,"suggestions":"139"},{"ruleId":"129","severity":1,"message":"130","line":40,"column":27,"nodeType":"131","messageId":"132","endLine":40,"endColumn":29},{"ruleId":"129","severity":1,"message":"130","line":43,"column":34,"nodeType":"131","messageId":"132","endLine":43,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":46,"column":34,"nodeType":"131","messageId":"132","endLine":46,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":60,"column":48,"nodeType":"131","messageId":"132","endLine":60,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":60,"column":90,"nodeType":"131","messageId":"132","endLine":60,"endColumn":92},{"ruleId":"129","severity":1,"message":"130","line":63,"column":48,"nodeType":"131","messageId":"132","endLine":63,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":63,"column":98,"nodeType":"131","messageId":"132","endLine":63,"endColumn":100},{"ruleId":"129","severity":1,"message":"130","line":66,"column":48,"nodeType":"131","messageId":"132","endLine":66,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":66,"column":90,"nodeType":"131","messageId":"132","endLine":66,"endColumn":92},{"ruleId":"129","severity":1,"message":"130","line":69,"column":85,"nodeType":"131","messageId":"132","endLine":69,"endColumn":87},{"ruleId":"129","severity":1,"message":"130","line":97,"column":51,"nodeType":"131","messageId":"132","endLine":97,"endColumn":53},{"ruleId":"129","severity":1,"message":"140","line":118,"column":96,"nodeType":"131","messageId":"132","endLine":118,"endColumn":98},{"ruleId":"141","severity":1,"message":"142","line":120,"column":21,"nodeType":"143","endLine":120,"endColumn":147},{"ruleId":"111","severity":1,"message":"144","line":1,"column":15,"nodeType":"113","messageId":"114","endLine":1,"endColumn":23},{"ruleId":"129","severity":1,"message":"130","line":6,"column":45,"nodeType":"131","messageId":"132","endLine":6,"endColumn":47},{"ruleId":"129","severity":1,"message":"130","line":40,"column":61,"nodeType":"131","messageId":"132","endLine":40,"endColumn":63},{"ruleId":"118","severity":1,"message":"145","line":7,"column":8,"nodeType":"120","endLine":7,"endColumn":10,"suggestions":"146"},{"ruleId":"111","severity":1,"message":"147","line":19,"column":29,"nodeType":"113","messageId":"114","endLine":19,"endColumn":45},{"ruleId":"129","severity":1,"message":"130","line":21,"column":38,"nodeType":"131","messageId":"132","endLine":21,"endColumn":40},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Context' is defined but never used.","'useAuthState' is defined but never used.","'Loader' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'auth' and 'getThemes'. Either include them or remove the dependency array.","ArrayExpression",["150"],"React Hook useEffect has a missing dependency: 'getErrors'. Either include it or remove the dependency array.",["151"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'user' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'Box' is defined but never used.","'firebase' is defined but never used.","React Hook useEffect has missing dependencies: 'props.errorsQuestions', 'props.questions', and 'setCurrentQuestion'. Either include them or remove the dependency array.",["152"],"Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'props.initHideContainer'. Either include it or remove the dependency array. If 'setShowContainer' needs the current value of 'props.initHideContainer', you can also switch to useReducer instead of useState and read 'props.initHideContainer' in the reducer.",["153"],"'originalQuestion' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [auth, getThemes]",{"range":"162","text":"163"},"Update the dependencies array to be: [UID, getErrors]",{"range":"164","text":"165"},"Update the dependencies array to be: [props.themes, props.settings.onlyErrorTestingMode, props.selectError, props.questions, props.errorsQuestions, setCurrentQuestion]",{"range":"166","text":"167"},"Update the dependencies array to be: [props.initHideContainer]",{"range":"168","text":"169"},[1129,1131],"[auth, getThemes]",[1218,1223],"[UID, getErrors]",[1282,1350],"[props.themes, props.settings.onlyErrorTestingMode, props.selectError, props.questions, props.errorsQuestions, setCurrentQuestion]",[281,283],"[props.initHideContainer]"]